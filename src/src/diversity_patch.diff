diff --git a/src/lib/LQCALC/LQCALC.cpp b/src/lib/LQCALC/LQCALC.cpp
index adfb449..f5ce249 100644
--- a/src/lib/LQCALC/LQCALC.cpp
+++ b/src/lib/LQCALC/LQCALC.cpp
@@ -40,4 +40,12 @@ void ICACHE_RAM_ATTR LQCALC::reset()
     {
         this->LQArray[i] = 0;
     }
-}
\ No newline at end of file
+}
+
+#define MAX_LQ (100)
+bool ICACHE_RAM_ATTR LQCALC::packetReceivedForPreviousFrame()
+{
+    uint32_t prevIndex = (LQArrayIndex == 0) ? (MAX_LQ - 1) : (LQArrayIndex - 1);
+
+    return (LQArray[prevIndex] != 0);
+}
diff --git a/src/lib/LQCALC/LQCALC.h b/src/lib/LQCALC/LQCALC.h
index d88001a..e8d981a 100644
--- a/src/lib/LQCALC/LQCALC.h
+++ b/src/lib/LQCALC/LQCALC.h
@@ -13,6 +13,7 @@ public:
     void ICACHE_RAM_ATTR inc();
     uint8_t ICACHE_RAM_ATTR getLQ();
     void ICACHE_RAM_ATTR reset();
+    bool ICACHE_RAM_ATTR packetReceivedForPreviousFrame();
 
 private:
     uint8_t LQcalcDepth = 0;
diff --git a/src/src/rx_main.cpp b/src/src/rx_main.cpp
index 3333527..51d8704 100644
--- a/src/src/rx_main.cpp
+++ b/src/src/rx_main.cpp
@@ -51,6 +51,8 @@ uint32_t LEDupdateCounterMillis;
 
 #define DEBUG_SUPPRESS // supresses debug messages on uart
 
+uint8_t antenna = 0;    // which antenna is currently in use
+
 hwTimer hwTimer;
 GENERIC_CRC8 ota_crc(ELRS_CRC_POLY);
 CRSF crsf(Serial); //pass a serial port object to the class for it to use
@@ -58,7 +60,11 @@ CRSF crsf(Serial); //pass a serial port object to the class for it to use
 /// Filters ////////////////
 LPF LPF_Offset(2);
 LPF LPF_OffsetDx(4);
-LPF LPF_UplinkRSSI(5);
+
+// LPF LPF_UplinkRSSI(5);
+LPF LPF_UplinkRSSI0(5);  // track rssi per antenna
+LPF LPF_UplinkRSSI1(5);
+
 
 /// LQ Calculation //////////
 LQCALC LQCALC;
@@ -118,10 +124,37 @@ uint8_t RFmodeCycleDivisor = RFmodeCycleDivisorFastMode;
 bool LockRFmode = false;
 ///////////////////////////////////////
 
+// flip to the other antenna
+// no-op if GPIO_PIN_ANTENNA_SELECT not defined
+void ICACHE_RAM_ATTR switchAntenna()
+{
+    #ifdef GPIO_PIN_ANTENNA_SELECT
+
+    antenna = !antenna;
+    digitalWrite(GPIO_PIN_ANTENNA_SELECT, antenna);
+    
+    #endif
+}
+
+
 void ICACHE_RAM_ATTR getRFlinkInfo()
 {
     //int8_t LastRSSI = Radio.LastPacketRSSI;
-    int32_t rssiDBM = LPF_UplinkRSSI.update(Radio.LastPacketRSSI);
+    // int32_t rssiDBM = LPF_UplinkRSSI.update(Radio.LastPacketRSSI);
+
+    int32_t rssiDBM0 = LPF_UplinkRSSI0.SmoothDataINT;
+    int32_t rssiDBM1 = LPF_UplinkRSSI1.SmoothDataINT;
+    switch (antenna) {
+        case 0:
+            rssiDBM0 = LPF_UplinkRSSI0.update(Radio.LastPacketRSSI);
+            break;
+        case 1:
+            rssiDBM1 = LPF_UplinkRSSI1.update(Radio.LastPacketRSSI);
+            break;
+    }
+
+    int32_t rssiDBM = (antenna == 0) ? rssiDBM0 : rssiDBM1;
+
 
     crsf.PackedRCdataOut.ch15 = UINT10_to_CRSF(map(constrain(rssiDBM, ExpressLRS_currAirRate_RFperfParams->RXsensitivity, -50),
                                                ExpressLRS_currAirRate_RFperfParams->RXsensitivity, -50, 0, 1023));
@@ -129,11 +162,14 @@ void ICACHE_RAM_ATTR getRFlinkInfo()
 
     // our rssiDBM is currently in the range -128 to 98, but BF wants a value in the range
     // 0 to 255 that maps to -1 * the negative part of the rssiDBM, so cap at 0.
-    if (rssiDBM > 0)
-        rssiDBM = 0;
-
-    crsf.LinkStatistics.uplink_RSSI_1 = -1 * rssiDBM; // to match BF
-    crsf.LinkStatistics.uplink_RSSI_2 = 0;
+    // if (rssiDBM > 0)
+    //     rssiDBM = 0;
+
+    if (rssiDBM0 > 0) rssiDBM0 = 0;
+    if (rssiDBM1 > 0) rssiDBM1 = 0;
+    
+    crsf.LinkStatistics.uplink_RSSI_1 = -rssiDBM0; // negate to match BF
+    crsf.LinkStatistics.uplink_RSSI_2 = -rssiDBM1;
     crsf.LinkStatistics.uplink_SNR = Radio.LastPacketSNR;
     crsf.LinkStatistics.uplink_Link_quality = uplinkLQ;
     crsf.LinkStatistics.rf_Mode = (uint8_t)RATE_4HZ - (uint8_t)ExpressLRS_currAirRate_Modparams->enum_rate;
@@ -207,7 +243,10 @@ void ICACHE_RAM_ATTR HandleSendTelemetryResponse()
     // rssi we send is for display only.
     // OpenTX treats the rssi values as signed.
 
-    uint8_t openTxRSSI = crsf.LinkStatistics.uplink_RSSI_1;
+    // uint8_t openTxRSSI = crsf.LinkStatistics.uplink_RSSI_1;
+    uint8_t openTxRSSI = (antenna == 0) ? crsf.LinkStatistics.uplink_RSSI_1 : crsf.LinkStatistics.uplink_RSSI_2;
+
+
     // truncate the range to fit into OpenTX's 8 bit signed value
     if (openTxRSSI > 127)
         openTxRSSI = 127;
@@ -272,6 +311,28 @@ void ICACHE_RAM_ATTR HWtimerCallbackTick() // this is 180 out of phase with the
 
 void ICACHE_RAM_ATTR HWtimerCallbackTock()
 {
+    static int32_t prevRSSI;        // saved rssi so that we can compare if switching made things better or worse
+    static bool antennaSwitched = false;
+
+    // if we didn't get a packet switch the antenna
+    if (!LQCALC.packetReceivedForPreviousFrame()) {
+        prevRSSI = (antenna == 0) ? LPF_UplinkRSSI0.SmoothDataINT : LPF_UplinkRSSI1.SmoothDataINT;
+        switchAntenna();
+        antennaSwitched = true;
+    } else if (antennaSwitched) {
+        // We switched antenna on the previous packet, so we now have relatively fresh rssi info for both antennas.
+        // We can compare the rssi values and see if we made things better or worse when we switched
+
+        int32_t rssi = (antenna == 0) ? LPF_UplinkRSSI0.SmoothDataINT : LPF_UplinkRSSI1.SmoothDataINT;
+        if (rssi < prevRSSI) {
+            // things got worse when we switched, so change back.
+            switchAntenna();
+        } else {
+            // all good, we can stay on the current antenna. Clear the flag.
+            antennaSwitched = false;
+        }
+    }
+
     HandleFHSS();
     HandleSendTelemetryResponse();
 }
 
 
